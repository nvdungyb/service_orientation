#version: '3.8'
#services:
#  service-a:
#    build: ./services/service-a
#    ports:
#      - "5001:5000"
#
#  service-b:
#    build: ./services/service-b
#    ports:
#      - "5002:5000"
#
#  gateway:
#    build: ./gateway
#    ports:
#      - "8080:8000"

version: '3.8'

services:
  broker:
    image: confluentinc/cp-kafka:7.5.0
    container_name: broker
    hostname: broker
    ports:
#      - 9092:9092
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT, EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,EXTERNAL://0.0.0.0:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092, EXTERNAL://localhost:9092  for localhost
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,EXTERNAL://host.docker.internal:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "broker:29092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 5

  connect:
    image: quay.io/debezium/connect:3.0
    container_name: connect
    ports:
      - "8083:8083"
    networks:
      - my-network
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
    depends_on:
      - broker


  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my-network

#  mysql:
#    image: mysql:8.0
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: 123
#      MYSQL_DATABASE: my_database
#      MYSQL_USER: mydb
#      MYSQL_PASSWORD: 123
#    ports:
#      - "3306:3306"
#    networks:
#      - my-network


  user-service:
    build:
      context: ./services/user-service
    container_name: user-service
    depends_on:
      - broker
      - redis
#      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      REDIS_HOST: redis
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/userdb
#      SPRING_DATASOURCE_USERNAME: mydb
#      SPRING_DATASOURCE_PASSWORD: 123
    ports:
      - "8081:8081"
    networks:
      - my-network

  post-service:
    build:
      context: ./services/post-service
    container_name: post-service
    depends_on:
      - broker
      - redis
#      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      REDIS_HOST: redis
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/postdb
#      SPRING_DATASOURCE_USERNAME: mydb
#      SPRING_DATASOURCE_PASSWORD: 123
    ports:
      - "8082:8082"
    networks:
      - my-network

  moderation-service:
    build:
      context: ./services/moderation-service
    container_name: moderation-service
    depends_on:
      - broker
      - redis
#      - mysql
    environment:
      SPRING_PROFILES_ACTIVE: docker
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      REDIS_HOST: redis
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/moderationdb
#      SPRING_DATASOURCE_USERNAME: mydb
#      SPRING_DATASOURCE_PASSWORD: 123
    ports:
      - "8084:8084"
    networks:
      - my-network

networks:
  my-network:
    driver: bridge